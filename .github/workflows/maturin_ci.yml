# This file is autogenerated by maturin v1.7.1
# To update, run
#
#    maturin generate-ci github --pytest --platform linux
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
            #- runner: ubuntu-latest
            #  target: x86
            #- runner: ubuntu-latest
            #  target: aarch64
            #- runner: ubuntu-latest
            #  target: armv7
            #- runner: ubuntu-latest
            #  target: s390x
            #- runner: ubuntu-latest
            #  target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  sedpackcache:
    name: Sedpack pip cache
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
    needs: [linux, sdist]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Get pip cache directory
        id: pip-cache
        shell: bash
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: Use cached venv or create it
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      # Build a virtualenv, but only if it doesn't already exist
      - name: Populate pip cache
        run: python -m pip install --require-hashes --no-deps -r requirements.txt
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Save cache
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ steps.cache.outputs.cache-primary-key }}
        if: steps.cache.outputs.cache-hit != 'true'

  pytest:
    name: Pytest
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
    needs: [sedpackcache]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Get pip cache directory
        id: pip-cache
        shell: bash
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: Use cached venv or create it
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Installing test requirements and sedpack
        # Start by "installing" sedpack to be sure all dependencies are listed
        run: |
          pip install -r test_requirements.txt
          echo "PYTHONPATH=./src:$PYTHONPATH" >> $GITHUB_ENV
      - name: Running unit tests
        run: |
          python -m pytest
