# This file is autogenerated by maturin v1.7.1
# To update, run
#
#    maturin generate-ci github --pytest --platform linux
#
name: Maturin CI

on:
  push:
    paths:
      - '**/*.py'
      - '**/*.rs'
      - 'pytest.ini'
  merge_group:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: 0 5 * * 1 # Every Monday at 5:00 UTC

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
            #- runner: ubuntu-latest
            #  target: x86
            #- runner: ubuntu-latest
            #  target: aarch64
            #- runner: ubuntu-latest
            #  target: armv7
            #- runner: ubuntu-latest
            #  target: s390x
            #- runner: ubuntu-latest
            #  target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      # Build wheels for pip
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist
      # Build a virtualenv cache
      - name: Get venv cache
        uses: actions/cache/restore@v4
        id: sedpack_venv_cache
        with:
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          path: .venv
      # Build a virtualenv, but only if it doesn't already exist
      - name: Populate pip cache
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --require-hashes --no-deps -r requirements.txt
      - name: Save cache
        uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          path: .venv

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  pytest:
    name: Pytest
    needs: [linux, sdist]
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          cache: 'pip'
      - name: Use cached venv
        uses: actions/cache/restore@v4
        id: sedpack_venv_cache
        with:
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          path: .venv
      - name: Fail if cache not found
        run: exit 1
        if: steps.cache.outputs.cache-hit != 'true'
      - uses: actions/download-artifact@v4
      - name: List all wheels
        run: ls wheels-*/*
      - name: Install wheel packages needed for wheel installation
        run: python -m pip install wheel
      - name: Install the correct wheel
        # Try installing all the wheels (one will be ok).
        run: |
          for W in wheels-*/* ; do python -m pip install $W || echo "" ; done
      - name: pytest
        shell: bash
        run: |
          source .venv/bin/activate
          pip install pytest
          pytest
